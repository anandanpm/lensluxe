<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details</title>
  <style>
    .btn-danger {
      background-color: #dc3545;
      border-color: #dc3545;
    }
    .btn-danger:hover {
      background-color: #c82333;
      border-color: #bd2130;
    }
    .btn-custom-primary {
      background-color: #007bff;
      border-color: #007bff;
      color: white;
      padding: 0.375em 0.75em;
      font-size: 0.875em;
      border-radius: 0.25em;
      width: 200px;
      margin: 10px;
    }
    .btn-custom-primary:hover {
      background-color: #0056b3;
      border-color: #004085;
    }
    .btn-custom-success {
      display: inline-block;
      background-color: #28a745;
      border-color: #28a745;
      color: white;
      padding: 0.375em 0.75em;
      font-size: 0.875em;
      border-radius: 0.25em;
      width: 200px;
      margin: 10px;
    }
    .btn-custom-success:hover {
      background-color: #218838;
      border-color: #1e7e34;
    }
    .button-container {
      display: flex;
      justify-content: center;
      gap: 20px;
    }
  </style>
</head>

<body>
  <%- include("../partials/userheader") %>
  <main class="main">
    <div class="page-header breadcrumb-wrap">
      <div class="container">
        <div class="breadcrumb">
          <a href="/" rel="nofollow">Home</a>
          <span></span> Shop
          <span></span> Order Details
        </div>
      </div>
    </div>
  
    <section class="mt-50 mb-50">
      <div class="container">
        <div class="row">
          <div class="col-12">
            <div class="table-responsive">
              <table class="table shopping-summery text-center">
                <thead>
                  <tr class="main-heading">
                    <th scope="col">Order Date</th>
                    <th scope="col">Payment Method</th>
                    <th scope="col">Payment Status</th>
                    <th scope="col">Address</th>
                    <th scope="col">Product Status</th>
                    <th scope="col">Image</th>
                    <th scope="col">Item Name</th>
                    <th scope="col">Quantity</th>
                    <th scope="col">Price</th>
                    <th scope="col">Action</th>
                  </tr>
                </thead>
                <tbody>
                  <% if (order && order.items && order.items.length > 0) { %>
                    <% order.items.forEach((item, index) => { %>
                      <tr>
                        <% if (index === 0) { %>
                          <td rowspan="<%= order.items.length %>"><%= order.orderDate ? order.orderDate.toDateString() : 'N/A' %></td>
                          <td rowspan="<%= order.items.length %>"><%= order.paymentMethod %></td>
                          <td rowspan="<%= order.items.length %>"><%= order.paymentStatus %></td>
                          <td rowspan="<%= order.items.length %>">
                            <% if (order.shippingAddress) { %>
                              <% let address = Object.values(order.shippingAddress).join(', '); %>
                              <%= address %>
                            <% } %>
                          </td>
                        <% } %>
                        <td><%= item.Status || 'Pending' %></td>
                        <td>
                          <% if (item.productId && item.productId.images && item.productId.images.length > 0) { %>
                            <img src="/productimages/<%= item.productId.images[0] %>" alt="<%= item.productId.name %>" class="mr-2" style="max-height: 80px;">
                          <% } else if (item.image && item.image.length > 0) { %>
                            <img src="/productimages/<%= item.image[0] %>" alt="<%= item.title %>" class="mr-2" style="max-height: 80px;">
                          <% } %>
                        </td>
                        <td><%= item.productId ? item.productId.name : item.title %></td>
                        <td><%= item.quantity %></td>
                        <td>₹<%= item.price %></td>
                        <td>
                          <% if (order.orderStatus === 'Delivered' && item.Status !== 'Cancelled' && item.Status !== 'Returned') { %>
                            <button class="btn btn-warning btn-sm returnProductBtn" data-order-id="<%= order._id %>" data-item-id="<%= item.productId ? item.productId._id : item._id %>">Return</button>
                          <% } else if (order.paymentStatus !== 'Failed' && item.Status !== 'Cancelled' && item.Status !== 'Returned') { %>
                            <button class="btn btn-danger btn-sm removeProductBtn" data-order-id="<%= order._id %>" data-item-id="<%= item.productId ? item.productId._id : item._id %>">Cancel</button>
                          <% } %>
                        </td>
                      </tr>
                    <% }); %>
                    
                    <%
                      const hasCancelledItem = order.items.every(item => item.Status === 'Cancelled' || item.Status === 'Returned');
                      const totalAmount = order.billTotal || 0;
                      const couponDiscount = order.couponDiscount || 0;
                      const finalAmount = totalAmount - couponDiscount;
                    %>
                    
                    <tr>
                      <td colspan="10">
                        <div class="card">
                          <div class="card-body">
                            <h5 class="card-title">Order Summary</h5>
                            <ul class="list-group list-group-flush">
                              <li class="list-group-item">Order Number: <strong><%= order.orderNumber || order._id %></strong></li>
                              <li class="list-group-item">Total Amount: <strong>₹<%= totalAmount %></strong></li>
                              <% if (couponDiscount > 0) { %>
                                <li class="list-group-item">Coupon Discount: <strong>₹<%= couponDiscount %></strong></li>
                                <li class="list-group-item">Final Amount: <strong>₹<%= finalAmount %></strong></li>
                              <% } %>
                              <li class="list-group-item">Order Status: <strong><%= order.orderStatus %></strong></li>
                              
                              <% if (hasCancelledItem) { %>
                                <li class="list-group-item text-danger">Note: Invoice cannot be downloaded for cancelled orders</li>
                              <% } else if (order.orderStatus === 'Delivered') { %>
                                <li class="list-group-item">
                                  <div class="button-container">
                                    <button type="button" class="btn btn-custom-primary" id="downloadInvoiceBtn" data-order-id="<%= order._id %>">Download Invoice</button>
                                    <% if (order.paymentStatus === 'Failed') { %>
                                      <button type="button" class="btn btn-custom-success" id="retryPaymentBtn" data-order-id="<%= order._id %>">Retry Payment</button>
                                    <% } %>
                                  </div>
                                </li>
                              <% } else if (order.paymentStatus === 'Failed') { %>
                                <li class="list-group-item">
                                  <div class="button-container">
                                    <button type="button" class="btn btn-custom-success" id="retryPaymentBtn" data-order-id="<%= order._id %>">Retry Payment</button>
                                  </div>
                                </li>
                              <% } %>
                            </ul>
                          </div>
                        </div>
                      </td>
                    </tr>
                  <% } else { %>
                    <tr>
                      <td colspan="10">No order items found.</td>
                    </tr>
                  <% } %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </section>
    
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
      const returnProduct = async (orderId, productId) => {
        const { value: returnReason } = await Swal.fire({
          title: 'Return Product',
          input: 'textarea',
          inputPlaceholder: 'Enter the reason for return...',
          showCancelButton: true,
          confirmButtonText: 'Return Product',
          cancelButtonText: 'Cancel',
          inputValidator: (value) => {
            if (!value) {
              return 'Please enter a reason for return';
            }
          }
        });
    
        if (returnReason) {
          try {
            const response = await fetch(`/return-product/${orderId}/${productId}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ returnReason }),
            });
            const data = await response.json();
            if (data.success) {
              Swal.fire('Success', data.message, 'success').then(() => location.reload());
            } else {
              Swal.fire('Error', data.error, 'error');
            }
          } catch (error) {
            Swal.fire('Error', 'Error returning product: ' + error.message, 'error');
          }
        }
      };
    
      const removeProduct = async (orderId, productId) => {
        const { value: cancelReason } = await Swal.fire({
          title: 'Cancel Order',
          input: 'textarea',
          inputPlaceholder: 'Enter the reason for cancellation...',
          showCancelButton: true,
          confirmButtonText: 'Cancel Order',
          cancelButtonText: 'Go Back',
          inputValidator: (value) => {
            if (!value) {
              return 'Please enter a reason for cancellation';
            }
          }
        });
    
        if (cancelReason) {
          try {
            const response = await fetch(`/cancel-product/${orderId}/${productId}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ cancelReason }),
            });
            const data = await response.json();
            if (data.success) {
              Swal.fire('Success', data.message, 'success').then(() => location.reload());
            } else {
              Swal.fire('Error', data.error, 'error');
            }
          } catch (error) {
            Swal.fire('Error', 'Error cancelling product: ' + error.message, 'error');
          }
        }
      };
    
      document.querySelectorAll('.returnProductBtn').forEach((btn) => {
        btn.addEventListener('click', async (event) => {
          event.preventDefault();
          const orderId = btn.dataset.orderId;
          const productId = btn.dataset.itemId;
          await returnProduct(orderId, productId);
        });
      });
    
      document.querySelectorAll('.removeProductBtn').forEach((btn) => {
        btn.addEventListener('click', async (event) => {
          event.preventDefault();
          const orderId = btn.dataset.orderId;
          const productId = btn.dataset.itemId;
          await removeProduct(orderId, productId);
        });
      });
    
      const retryPayment = async (orderId) => {
        try {
          console.log('orderid:', orderId);
          const response = await fetch(`/retry-payment`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId }),
          });
    
          if (!response.ok) {
            throw new Error('Failed to retry payment');
          }
    
          const data = await response.json();
    
          if (data.success) {
            const options = {
              key: 'rzp_test_IKlEAuHmbUdndD', // Replace with your actual Razorpay key
              amount: data.amount,
              currency: 'INR',
              name: 'LensLuxe',
              description: `Payment for Order ID: ${orderId}`,
              order_id: data.razorpayOrderId,
              handler: async function (response) {
                try {
                  Swal.fire({
                    icon: 'success',
                    title: 'Payment Successful',
                    text: 'Your payment was successful!',
                  }).then(() => {
                    location.reload();
                  });
                } catch (error) {
                  console.error('Error after payment:', error);
                  Swal.fire({
                    icon: 'success',
                    title: 'Payment Successful',
                    text: 'Your payment was successful!',
                  }).then(() => {
                    location.reload();
                  });
                }
              },
              theme: {
                color: '#3399cc'
              }
            };
    
            const rzp = new Razorpay(options);
    
            rzp.on('payment.failed', function (response) {
              console.error('Payment failed:', response.error);
              Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Payment failed. Please try again.',
              });
            });
    
            rzp.open();
          } else {
            Swal.fire('Error', data.error, 'error');
          }
        } catch (error) {
          console.error('Error retrying payment:', error);
          Swal.fire('Error', 'Error retrying payment: ' + error.message, 'error');
        }
      };

      document.querySelector('#retryPaymentBtn')?.addEventListener('click', async (event) => {
        event.preventDefault();
        const orderId = event.target.dataset.orderId;
        await retryPayment(orderId);
      });
    
      document.getElementById('downloadInvoiceBtn')?.addEventListener('click', function () {
        const orderId = this.dataset.orderId;
        fetch('/generate-invoice', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId: orderId })
        })
        .then(response => response.blob())
        .then(blob => {
          const url = window.URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = url;
          link.download = `invoice-${orderId}.pdf`;
          link.click();
          window.URL.revokeObjectURL(url);
        })
        .catch(error => {
          console.error('Error generating invoice:', error);
          Swal.fire('Error', 'Failed to generate invoice', 'error');
        });
      });
    </script>
    
    <%- include("../partials/userfooter") %>
  </body>
</html>
