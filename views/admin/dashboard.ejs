<!DOCTYPE HTML>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>lensluxe ecommerce website Dashboard</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta property="og:title" content="">
    <meta property="og:type" content="">
    <meta property="og:url" content="">
    <meta property="og:image" content="">
    <!-- Favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="/admin_assets/imgs/theme/favicon.svg">
    <!-- Template CSS -->
    <link href="/admin_assets/css/main.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        /* Add custom styles for active sidebar items */
        .menu-aside .menu-item.active a {
            background-color: #333;
        }

        .menu-aside .menu-item.active a .icon {
            color: #fff;
        }

        .menu-aside .menu-item.active a .text {
            color: #fff;
        }
    </style>
     <style>
        .card-title {
            font-size: 1.25rem;
            font-weight: bold;
            color: #343a40;
        }

        .btn-group .btn {
            font-size: 0.875rem;
            padding: 0.5rem 1rem;
            margin-right: 0.5rem;
        }

        .btn-group .btn:last-child {
            margin-right: 0;
        }

        #ordersChart {
            margin-top: 1.5rem;
        }
    </style>
   
</head>

<body>
    <!-- Header -->
    <header class="main-header navbar">
        <div class="col-search">
            <!-- Search form can be added here if needed -->
        </div>
        <div class="col-nav">
            <!-- Logout button -->
            <a href="/admin/adminlogout" class="btn" style="background-color: #008178; color: white;">Logout</a>
        </div>
    </header>

    <!-- Sidebar -->
    <aside class="navbar-aside" id="offcanvas_aside">
        <div class="aside-top">
            <a href="index.html" class="brand-wrap">
                <img src="/admin_assets/imgs/theme/lensluxe.png" class="logo" alt="Evara Dashboard">
            </a>
            <div>
                <button class="btn btn-icon btn-aside-minimize"> <i class="text-muted material-icons md-menu_open"></i> </button>
            </div>
        </div>
        <nav>
            <ul class="menu-aside">
                <li class="menu-item active">
                    <a class="menu-link" href="/admin/dashboard" onclick="highlightMenuItem(this)"> <i class="icon material-icons md-home"></i>
                        <span class="text">Dashboard</span>
                    </a>
                </li>
                <!-- Customers link -->
                <li class="menu-item">
                    <a class="menu-link" href="/admin/customer" onclick="highlightMenuItem(this)">
                        <i class="icon material-icons md-people"></i>
                        <span class="text">Customers</span>
                    </a>
                </li>
                <!-- Categories link -->
                <li class="menu-item">
                    <a class="menu-link" href="/admin/category" onclick="highlightMenuItem(this)">
                        <i class="icon material-icons md-category"></i>
                        <span class="text">Categories</span>
                    </a>
                </li>
                <!-- Products link -->
                <li class="menu-item">
                    <a class="menu-link" href="/admin/product" onclick="highlightMenuItem(this)">
                        <i class="icon material-icons md-shopping_basket"></i>
                        <span class="text">Products</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/order" onclick="highlightMenuItem(this)">
                        <i class="icon material-icons md-store"></i>
                        <span class="text">Order</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/offer" onclick="highlightMenuItem(this)">
                        <i class="icon material-icons md-local_offer"></i>
                        <span class="text">Offer</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/coupon" onclick="highlightMenuItem(this)">
                        <i class="material-icons md-store"></i>
                        <span class="text">Coupon</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/salesreport" onclick="highlightMenuItem(this)">
                        <i class="material-icons md-store"></i>
                        <span class="text">Sales Report</span>
                    </a>
                </li>
            </ul>
        </nav>
    </aside>
    <!-- Main Content -->
    <main class="main-wrap">
        <section class="content-main">
            <div class="content-header">
                <div>
                    <h2 class="content-title card-title">Dashboard</h2>
                </div>
            </div>
            <!-- Your dashboard content can go here -->
            <div class="row">
                <div class="col-lg-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-primary-light"><i class="text-primary material-icons md-monetization_on"></i></span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Total Revenue</h6>
                                <span>â‚¹<%= totalRevenue.toFixed(2) %></span>
                                <small class="text-muted d-block">From Delivered Orders</small>
                            </div>
                        </article>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-success-light"><i class="text-success material-icons md-local_shipping"></i></span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Delivered Orders</h6>
                                <span><%= orderCount %></span>
                                <small class="text-muted d-block">Total Completed</small>
                            </div>
                        </article>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-warning-light"><i class="text-warning material-icons md-qr_code"></i></span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Active Products</h6>
                                <span><%= productCount %></span>
                                <small class="text-muted d-block">In Stock</small>
                            </div>
                        </article>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-info-light"><i class="text-info material-icons md-timeline"></i></span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Last Week Orders</h6>
                                <span><%=lastweekcount %></span>
                                <small class="text-muted d-block">Last 7 Days</small>
                            </div>
                        </article>
                    </div>
                </div>
            </div>
    
            <!-- Orders Statistics Chart -->
            <div class="container mt-5">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="card card-body mb-4">
                            <h6 class="mb-1 card-title">Orders Statistics</h6>
                            <div class="btn-group mb-3" role="group">
                                <button class="btn btn-primary" id="weeklyBtn">Weekly</button>
                                <button class="btn btn-primary" id="monthlyBtn">Monthly</button>
                                <button class="btn btn-primary" id="yearlyBtn">Yearly</button>
                            </div>
                            <div class="date-filter mb-3">
                                <label for="startDate">Start Date:</label>
                                <input type="date" id="startDate" name="startDate">
                                <label for="endDate">End Date:</label>
                                <input type="date" id="endDate" name="endDate">
                                <button class="btn btn-primary" id="applyDateFilter">Apply</button>
                            </div>
                            <canvas id="ordersChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                  <div class="card card-body mb-4">
                    <h6 class="mb-1 card-title">Top  Categories</h6>
                    <canvas id="topCategoriesChart"></canvas>
                  </div>
                </div>
                <div class="col-lg-6">
                  <div class="card card-body mb-4">
                    <h6 class="mb-1 card-title">Top  Products</h6>
                    <canvas id="topProductsChart"></canvas>
                  </div>
                </div>
              </div>
        
        </section>
    </main>
    
    
    <!-- Footer -->
    <footer class="main-footer font-xs">
        <div class="row pb-30 pt-15">
            <div class="col-sm-6">
                <script>
                    document.write(new Date().getFullYear())
                </script> Â©, Evara - HTML Ecommerce Template .
            </div>
            <div class="col-sm-6">
                <div class="text-sm-end">
                    All rights reserved
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript Imports -->
    <script src="/admin_assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="/admin_assets/js/vendors/bootstrap.bundle.min.js"></script>
    <!-- Add more JavaScript imports if needed -->
    <!-- Main Script -->
    <script src="/admin_assets/js/main.js" type="text/javascript"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <canvas id="ordersChart" style="max-height: 400px;"></canvas>
    <script>
        
        function highlightMenuItem(item) {
            
            var menuItems = document.querySelectorAll('.menu-aside .menu-item');
            menuItems.forEach(function(menuItem) {
                menuItem.classList.remove('active');
            });

           
            item.parentNode.classList.add('active');
        }

        
        function highlightMenuItem(item) {
          
            var menuItems = document.querySelectorAll('.menu-aside .menu-item');
            menuItems.forEach(function(menuItem) {
                menuItem.classList.remove('active');
            });
    
           
            item.parentNode.classList.add('active');
        }
    </script>  



  

  


 <script>
    let chartInstance;

    async function fetchOrdersData(timePeriod, startDate = null, endDate = null) {
        let url = `/admin/dashboardgraphdata?timePeriod=${timePeriod}`;
        if (startDate && endDate) {
            const formattedStartDate = startDate.toISOString().split('T')[0];
            const formattedEndDate = endDate.toISOString().split('T')[0];
            url += `&startDate=${formattedStartDate}&endDate=${formattedEndDate}`;
        }
        const response = await fetch(url);
        const data = await response.json();
        console.log(data, 'data is coming');

        if (response.ok) {
            const labels = [];
            const ordersData = [];

            if (timePeriod === 'weekly' || timePeriod === 'monthly' || timePeriod === 'yearly') {
                const currentDate = new Date();

                if (timePeriod === 'weekly') {
                    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                    const startOfWeek = new Date(currentDate.getTime() - currentDate.getDay() * 24 * 60 * 60 * 1000);
                    for (let i = 0; i < 7; i++) {
                        const date = new Date(startOfWeek.getTime() + i * 24 * 60 * 60 * 1000);
                        const dayName = daysOfWeek[date.getDay()];
                        labels.push(dayName);
                        ordersData.push(0);
                    }

                    data.forEach(d => {
                        const date = new Date(d.label);
                        const dayIndex = date.getDay();
                        ordersData[dayIndex] += d.count;
                    });
                } else if (timePeriod === 'monthly') {
                    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                    for (let i = 0; i < 12; i++) {
                        labels.push(monthNames[i]);
                        ordersData.push(0);
                    }

                    data.forEach(d => {
                        const date = new Date(d.label);
                        const month = date.getMonth();
                        ordersData[month] += d.count;
                    });
                } else if (timePeriod === 'yearly') {
                    const currentYear = currentDate.getFullYear();
                    for (let i = currentYear - 4; i <= currentYear; i++) {
                        labels.push(i.toString());
                        ordersData.push(0);
                    }

                    data.forEach(d => {
                        const year = new Date(d.label).getFullYear();
                        const index = labels.indexOf(year.toString());
                        if (index !== -1) {
                            ordersData[index] += d.count;
                        }
                    });
                }
            } else {
                const startDateObj = new Date(startDate);
                const endDateObj = new Date(endDate);
                const diffTime = endDateObj.getTime() - startDateObj.getTime();
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                for (let i = 0; i <= diffDays; i++) {
                    const currentDate = new Date(startDateObj.getTime() + i * 24 * 60 * 60 * 1000);
                    const label = currentDate.toISOString().split('T')[0];
                    labels.push(label);
                    ordersData.push(0);
                }

                data.forEach(d => {
                    const date = new Date(d.label);
                    const label = date.toISOString().split('T')[0];
                    const index = labels.indexOf(label);
                    if (index !== -1) {
                        ordersData[index] += d.count;
                    }
                });
            }

            return { ordersData, labels };
        } else {
            throw new Error(data.error);
        }
    }

    async function renderChart(timePeriod, startDate = null, endDate = null) {
        const { ordersData, labels } = await fetchOrdersData(timePeriod, startDate, endDate);

        if (chartInstance) {
            chartInstance.data.datasets[0].data = ordersData;
            chartInstance.data.labels = labels;
            chartInstance.update();
        } else {
            const ctx = document.getElementById('ordersChart').getContext('2d');
            chartInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Number of Orders',
                            data: ordersData,
                            backgroundColor: 'rgba(75, 192, 192, 0.5)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1,
                            borderRadius: 3,
                            borderSkipped: false
                        }
                    ]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            },
                            grid: {
                                color: 'rgba(200, 200, 200, 0.2)'
                            }
                        },
                        x: {
                            grid: {
                                color: 'rgba(200, 200, 200, 0.2)'
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            enabled: true,
                            backgroundColor: 'rgba(0,0,0,0.7)',
                            titleFont: {
                                family: 'Arial, Helvetica, sans-serif',
                                size: 16
                            },
                            bodyFont: {
                                family: 'Arial, Helvetica, sans-serif',
                                size: 14
                            }
                        },
                        legend: {
                            labels: {
                                font: {
                                    family: 'Arial, Helvetica, sans-serif',
                                    size: 14
                                }
                            }
                        }
                    }
                }
            });
        }
    }

    document.getElementById('applyDateFilter').addEventListener('click', () => {
        const startDateString = document.getElementById('startDate').value;
        const endDateString = document.getElementById('endDate').value;

        const startDate = new Date(startDateString);
        const endDate = new Date(endDateString);

        if (endDate >= startDate) {
            renderChart('custom', startDate, endDate);
        } else {
            alert('End date should be after the start date.');
        }
    });

    document.getElementById('weeklyBtn').addEventListener('click', () => renderChart('weekly'));
    document.getElementById('monthlyBtn').addEventListener('click', () => renderChart('monthly'));
    document.getElementById('yearlyBtn').addEventListener('click', () => renderChart('yearly'));

    renderChart('weekly');
</script> 





   <script>
    async function fetchTopCategories() {
        const response = await fetch('/admin/top-categories');
        const data = await response.json();

        if (response.ok) {
            return data;
        } else {
            throw new Error(data.error);
        }
    }

    async function renderTopCategoriesChart() {
        const data = await fetchTopCategories();

        const labels = data.map(item => item.category);
        const counts = data.map(item => item.count);

        // Generate a color array for each category
        const backgroundColors = labels.map((label, index) => {
            const colors = [
                'rgba(255, 99, 132, 0.5)', // Red
                'rgba(54, 162, 235, 0.5)', // Blue
                'rgba(255, 206, 86, 0.5)', // Yellow
                'rgba(75, 192, 192, 0.5)', // Green
                'rgba(153, 102, 255, 0.5)', // Purple
                'rgba(255, 159, 64, 0.5)', // Orange
                'rgba(199, 199, 199, 0.5)', // Grey
                'rgba(83, 102, 255, 0.5)', // Light Blue
                'rgba(255, 94, 94, 0.5)',  // Light Red
                'rgba(94, 255, 196, 0.5)'  // Aqua
            ];
            return colors[index % colors.length];
        });

        const ctx = document.getElementById('topCategoriesChart').getContext('2d');
        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Number of Orders',
                        data: counts,
                        backgroundColor: backgroundColors,
                        borderColor: 'rgba(255, 255, 255, 1)',
                        borderWidth: 1,
                        borderRadius: 5,
                        borderSkipped: false
                    }
                ]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            precision: 0
                        },
                        grid: {
                            color: 'rgba(200, 200, 200, 0.2)'
                        }
                    },
                    x: {
                        grid: {
                            color: 'rgba(200, 200, 200, 0.2)'
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        enabled: true,
                        backgroundColor: 'rgba(0,0,0,0.7)',
                        titleFont: {
                            family: 'Arial, Helvetica, sans-serif',
                            size: 16
                        },
                        bodyFont: {
                            family: 'Arial, Helvetica, sans-serif',
                            size: 14
                        }
                    },
                    legend: {
                        labels: {
                            font: {
                                family: 'Arial, Helvetica, sans-serif',
                                size: 14
                            }
                        }
                    }
                }
            }
        });
    }

    renderTopCategoriesChart();
</script>


<script>
    async function fetchTopProducts() {
      const response = await fetch('/admin/top-products');
      const data = await response.json();
  
      if (response.ok) {
        return data;
      } else {
        throw new Error(data.error);
      }
    }
  
    async function renderTopProductsChart() {
      const data = await fetchTopProducts();
  
      const labels = data.map(item => item.product);
      const counts = data.map(item => item.count);
      const backgroundColors = [
        'rgba(255, 99, 132, 0.5)', // Red
        'rgba(54, 162, 235, 0.5)', // Blue
        'rgba(255, 206, 86, 0.5)', // Yellow
        'rgba(75, 192, 192, 0.5)', // Green
        'rgba(153, 102, 255, 0.5)', // Purple
        'rgba(255, 159, 64, 0.5)', // Orange
        'rgba(199, 199, 199, 0.5)', // Grey
        'rgba(233, 30, 99, 0.5)', // Pink
        'rgba(255, 87, 34, 0.5)', // Deep Orange
        'rgba(123, 156, 149, 0.5)' // Blue Grey
      ];
      const borderColors = [
        'rgba(255, 99, 132, 1)', // Red
        'rgba(54, 162, 235, 1)', // Blue
        'rgba(255, 206, 86, 1)', // Yellow
        'rgba(75, 192, 192, 1)', // Green
        'rgba(153, 102, 255, 1)', // Purple
        'rgba(255, 159, 64, 1)', // Orange
        'rgba(199, 199, 199, 1)', // Grey
        'rgba(233, 30, 99, 1)', // Pink
        'rgba(255, 87, 34, 1)', // Deep Orange
        'rgba(96, 125, 139, 1)' // Blue Grey
      ];
  
      const ctx = document.getElementById('topProductsChart').getContext('2d');
      new Chart(ctx, {
        type: 'pie',
        data: {
          labels: labels,
          datasets: [
            {
              label: 'Number of Orders',
              data: counts,
              backgroundColor: backgroundColors.slice(0, counts.length),
              borderColor: borderColors.slice(0, counts.length),
              borderWidth: 1,
              borderRadius: 5,
              borderSkipped: false
            }
          ]
        },
        options: {
          plugins: {
            tooltip: {
              enabled: true,
              backgroundColor: 'rgba(0,0,0,0.7)',
              titleFont: {
                family: 'Arial, Helvetica, sans-serif',
                size: 16
              },
              bodyFont: {
                family: 'Arial, Helvetica, sans-serif',
                size: 14
              }
            },
            legend: {
              labels: {
                font: {
                  family: 'Arial, Helvetica, sans-serif',
                  size: 14
                }
              }
            }
          }
        }
      });
    }
  
    renderTopProductsChart();
  </script>
  

</body>

</html>
